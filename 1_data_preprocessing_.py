# -*- coding: utf-8 -*-
"""1.Data preprocessing .ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aB-ZimUKO_Aa6lie2X7k7kDa3_eWmxmB
"""

# importing libraries
import pandas as pd
import scipy
import numpy as np
from sklearn.preprocessing import MinMaxScaler
import seaborn as sns
import matplotlib.pyplot as plt

"""dataset = https://www.kaggle.com/datasets/sameerprogrammer/college-placement"""

df = pd.read_csv('/content/placement-dataset.csv')
print(df.head())

df.shape
# for checking the number of rows and columns

df.info()

df.isnull().sum()

# Assuming your DataFrame is named 'df' with 4 columns
num_columns = df.shape[1]  # Get the number of columns in the DataFrame

# Adjust the subplot layout based on the number of columns
fig, axs = plt.subplots(num_columns, 1, dpi=95, figsize=(7, num_columns * 2), sharex=True)

# Plot boxplots for each column
for i, col in enumerate(df.columns):
    axs[i].boxplot(df[col], vert=False)
    axs[i].set_ylabel(col)

plt.tight_layout()  # Adjust layout to prevent overlap
plt.show()

# Identify the quartiles
q1, q3 = np.percentile(df['iq'], [25, 75])
# Calculate the interquartile range
iqr = q3 - q1
# Calculate the lower and upper bounds
lower_bound = q1 - (1.5 * iqr)
upper_bound = q3 + (1.5 * iqr)
# Drop the outliers
clean_data = df[(df['iq'] >= lower_bound)
				& (df['iq'] <= upper_bound)]

#correlation
corr = df.corr()

plt.figure(dpi=130)
sns.heatmap(df.corr(), annot=True, fmt= '.2f')
plt.show()

corr['placement'].sort_values(ascending = False)

plt.pie(df.placement.value_counts(),
		labels= ['placed', 'Not placed'],
		autopct='%.f', shadow=True)
plt.title('placement Proportionality')
plt.show()

# separate array into input and output components
X = df.drop(columns =['placement'])
Y = df.placement

# initialising the MinMaxScaler
scaler = MinMaxScaler(feature_range=(0, 1))

# learning the statistical parameters for each of the data and transforming
rescaledX = scaler.fit_transform(X)
rescaledX[:5]

from sklearn.preprocessing import StandardScaler

scaler = StandardScaler().fit(X)
rescaledX = scaler.transform(X)
rescaledX[:5]